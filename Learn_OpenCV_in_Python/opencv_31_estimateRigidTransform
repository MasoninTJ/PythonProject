import glob

import cv2
import cv2 as cv
import numpy as np

# 终止标准
criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 30, 0.001)

# 准备对象点, 如 (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)
objp = np.zeros((6 * 8, 3), np.float32)
objp[:, :2] = np.mgrid[0:8, 0:6].T.reshape(-1, 2)

# 用于存储所有图像对象点与图像点的矩阵
objpoints = []  # 在真实世界中的 3d 点
imgpoints = []  # 在图像平面中的 2d 点

images = glob.glob('image/Chess/*.jpg')

for fname in images:
    img = cv.imread(fname)
    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)

    # 找到棋盘上所有的角点
    ret, corners = cv.findChessboardCorners(gray, (8, 6), None)

    # 如果找到了，便添加对象点和图像点(在细化后)
    if ret == True:
        objpoints.append(objp)

        corners2 = cv.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)
        imgpoints.append(corners)

        # 绘制角点
        cv.drawChessboardCorners(img, (8, 6), corners2, ret)
        cv.imshow('img', img)
        cv.waitKey(500)

cv.destroyAllWindows()

# 相机标定
ret, mtx, dist, rvecs, tvecs = cv.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)

img = cv.imread('image/Chess/Chess2.jpg')
h, w = img.shape[:2]
print(h, w)
newcameramtx, roi = cv.getOptimalNewCameraMatrix(mtx, dist, (w, h), 1, (w, h))

print(roi)
# 矫正
dst = cv.undistort(img, mtx, dist, None, newcameramtx)
cv2.imshow('src', img)
cv2.imshow('dst', dst)

cv2.waitKey(0)
cv2.destroyAllWindows()

# 裁切图像
x, y, w, h = roi
dst = dst[y:y + h, x:x + w]
